[{"path":"https://pablogguz.github.io/ebrdify/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ebrdify authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pablogguz.github.io/ebrdify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pablo Garcia-Guzman. Author, maintainer.","code":""},{"path":"https://pablogguz.github.io/ebrdify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Garcia-Guzman P (2025). ebrdify: handy function make data EBRD-friendly. R package version 0.2.1, https://pablogguz.github.io/ebrdify/.","code":"@Manual{,   title = {ebrdify: A handy function to make your data EBRD-friendly},   author = {Pablo Garcia-Guzman},   year = {2025},   note = {R package version 0.2.1},   url = {https://pablogguz.github.io/ebrdify/}, }"},{"path":"https://pablogguz.github.io/ebrdify/index.html","id":"ebrdify-","dir":"","previous_headings":"","what":"A handy function to make your data EBRD-friendly","title":"A handy function to make your data EBRD-friendly","text":"handy function classify EBRD countries operation","code":""},{"path":"https://pablogguz.github.io/ebrdify/index.html","id":"r","dir":"","previous_headings":"","what":"R","title":"A handy function to make your data EBRD-friendly","text":"","code":"# install.packages(\"pak\") pak::pak(\"pablogguz/ebrdify\")"},{"path":"https://pablogguz.github.io/ebrdify/index.html","id":"stata","dir":"","previous_headings":"","what":"Stata","title":"A handy function to make your data EBRD-friendly","text":"⚠️ Warning: changelog version history repository track changes R implementation. Stata version updates, please check Stata folder directly.","code":"net install ebrdify, from(https://raw.githubusercontent.com/pablogguz/ebrdify/master/stata) replace"},{"path":"https://pablogguz.github.io/ebrdify/reference/ebrdify.html","id":null,"dir":"Reference","previous_headings":"","what":"EBRD Country Classification — ebrdify","title":"EBRD Country Classification — ebrdify","text":"function classifies countries based EBRD status, region, EU membership.","code":""},{"path":"https://pablogguz.github.io/ebrdify/reference/ebrdify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EBRD Country Classification — ebrdify","text":"","code":"ebrdify(data = NULL, var, var_format = NULL)"},{"path":"https://pablogguz.github.io/ebrdify/reference/ebrdify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EBRD Country Classification — ebrdify","text":"data data frame containing variable classify, NULL using vector input. var string specifying name variable data contains country codes, vector country codes. var_format string specifying format country codes var. can \"country.name\", \"iso3c\", \"iso2c\". NULL, function attempt detect format.","code":""},{"path":"https://pablogguz.github.io/ebrdify/reference/ebrdify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EBRD Country Classification — ebrdify","text":"data frame four new variables: ebrd, coo_group, eu_ebrd, coo_group_alt, prints unmatched entries. ebrd: binary variable indicating whether country EBRD country operation (1 = EBRD COO, 0 = Non-COO). coo_group: variable classifying country specific EBRD country groupings. eu_ebrd: binary variable indicating whether country EBRD country operation EU member (1 = EU & EBRD, 0 = otherwise). coo_group_alt: alternative classification countries broader categories ebrd_shareholder: binary variable indicating whether country EBRD shareholder (1 = Shareholder, 0 = Non-Shareholder).","code":""},{"path":"https://pablogguz.github.io/ebrdify/reference/ebrdify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EBRD Country Classification — ebrdify","text":"","code":"# Using a data frame data <- data.frame(country_code = c(\"KAZ\", \"CZE\", \"GRC\", \"ARM\", \"ALB\", \"EGY\", \"USA\", \"CAN\")) ebrdified_data <- ebrdify(data, \"country_code\", var_format = \"iso3c\") print(ebrdified_data) #>   country_code ebrd                          coo_group eu_ebrd #> 1          KAZ    1                       Central Asia       0 #> 2          CZE    1   Central Europe and Baltic States       1 #> 3          GRC    1                             Greece       1 #> 4          ARM    1    Eastern Europe and the Caucasus       0 #> 5          ALB    1               South-eastern Europe       0 #> 6          EGY    1 Southern and Eastern Mediterranean       0 #> 7          USA    0                               <NA>       0 #> 8          CAN    0                               <NA>       0 #>                    coo_group_alt ebrd_shareholder #> 1 Former Soviet Union + Mongolia                1 #> 2                        EU-EBRD                1 #> 3                        EU-EBRD                1 #> 4 Former Soviet Union + Mongolia                1 #> 5                Western Balkans                1 #> 6                          SEMED                1 #> 7                           <NA>                1 #> 8                           <NA>                1  # Using a vector country_vector <- c(\"KAZ\", \"CZE\", \"GRC\", \"ARM\", \"ALB\", \"EGY\", \"USA\", \"CAN\") ebrdified_vector <- ebrdify(var = country_vector, var_format = \"iso3c\") print(ebrdified_vector) #>   ebrd                          coo_group eu_ebrd #> 1    1                       Central Asia       0 #> 2    1   Central Europe and Baltic States       1 #> 3    1                             Greece       1 #> 4    1    Eastern Europe and the Caucasus       0 #> 5    1               South-eastern Europe       0 #> 6    1 Southern and Eastern Mediterranean       0 #> 7    0                               <NA>       0 #> 8    0                               <NA>       0 #>                    coo_group_alt ebrd_shareholder #> 1 Former Soviet Union + Mongolia                1 #> 2                        EU-EBRD                1 #> 3                        EU-EBRD                1 #> 4 Former Soviet Union + Mongolia                1 #> 5                Western Balkans                1 #> 6                          SEMED                1 #> 7                           <NA>                1 #> 8                           <NA>                1  # Using a data frame with fake country names data_fake_names <- data.frame(country_name = c(\"Kazakhstan\",                                                \"Czechia\",                                                \"Narnia\",                                                \"Armenia\",                                                \"Albania\",                                                \"Wakanda\",                                                \"Kosovo\",                                                \"United States\",                                                \"Canada\")) ebrdified_data_fake_names <- ebrdify(data_fake_names, \"country_name\") #> Warning: Some values were not matched unambiguously: Narnia, Wakanda #> The following entries could not be matched: Narnia, Wakanda print(ebrdified_data_fake_names) #>    country_name ebrd                        coo_group eu_ebrd #> 1    Kazakhstan    1                     Central Asia       0 #> 2       Czechia    1 Central Europe and Baltic States       1 #> 3        Narnia   NA                             <NA>      NA #> 4       Armenia    1  Eastern Europe and the Caucasus       0 #> 5       Albania    1             South-eastern Europe       0 #> 6       Wakanda   NA                             <NA>      NA #> 7        Kosovo    1             South-eastern Europe       0 #> 8 United States    0                             <NA>       0 #> 9        Canada    0                             <NA>       0 #>                    coo_group_alt ebrd_shareholder #> 1 Former Soviet Union + Mongolia                1 #> 2                        EU-EBRD                1 #> 3                           <NA>               NA #> 4 Former Soviet Union + Mongolia                1 #> 5                Western Balkans                1 #> 6                           <NA>               NA #> 7                Western Balkans                1 #> 8                           <NA>                1 #> 9                           <NA>                1"},{"path":"https://pablogguz.github.io/ebrdify/news/index.html","id":"ebrdify-030","dir":"Changelog","previous_headings":"","what":"ebrdify 0.3.0","title":"ebrdify 0.3.0","text":"Moved IRQ SEMED","code":""},{"path":"https://pablogguz.github.io/ebrdify/news/index.html","id":"ebrdify-020","dir":"Changelog","previous_headings":"","what":"ebrdify 0.2.0","title":"ebrdify 0.2.0","text":"Included 5 new countries operation","code":""},{"path":"https://pablogguz.github.io/ebrdify/news/index.html","id":"ebrdify-011","dir":"Changelog","previous_headings":"","what":"ebrdify 0.1.1","title":"ebrdify 0.1.1","text":"Faster ebrdify() function, improved handling edge cases","code":""},{"path":"https://pablogguz.github.io/ebrdify/news/index.html","id":"ebrdify-010","dir":"Changelog","previous_headings":"","what":"ebrdify 0.1.0","title":"ebrdify 0.1.0","text":"Fix bug ebrdify() caused fail recognize Kosovo EBRD country Fix error ebrdify() classified Turkiye within SEMED region coo_group_alt generate alternative classification countries operation ebrd_shareholder identify countries EBRD shareholders","code":""},{"path":"https://pablogguz.github.io/ebrdify/news/index.html","id":"ebrdify-v0009000","dir":"Changelog","previous_headings":"","what":"ebrdify v0.0.0.9000","title":"ebrdify v0.0.0.9000","text":"Initial release","code":""}]
